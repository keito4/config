name: Build and Release DevContainer Image

on:
  push:
    branches: [main]
  workflow_dispatch:

# Cancel in-progress runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache semantic-release dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-semantic-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-semantic-

      - name: Semantic Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm install --save-dev semantic-release @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/github @semantic-release/exec
          npx semantic-release --dry-run > semantic-output.txt 2>&1 || true
          NEW_VERSION=$(grep -oP 'Published release \K[0-9]+\.[0-9]+\.[0-9]+' semantic-output.txt || echo "")
          if [ -z "$NEW_VERSION" ]; then
            echo "skip_release=true" >> $GITHUB_OUTPUT
          else
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "version_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "skip_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Fix workspace permissions
        if: steps.semantic.outputs.skip_release != 'true'
        run: sudo chown -R $(id -u):$(id -g) "$GITHUB_WORKSPACE"

      - uses: docker/setup-qemu-action@v3
        if: steps.semantic.outputs.skip_release != 'true'

      - uses: docker/setup-buildx-action@v3
        if: steps.semantic.outputs.skip_release != 'true'
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host
          buildkitd-flags: '--allow-insecure-entitlement network.host'
          install: true

      - uses: docker/login-action@v3
        if: steps.semantic.outputs.skip_release != 'true'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Docker metadata
        id: meta
        if: steps.semantic.outputs.skip_release != 'true'
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/config-base
          tags: |
            type=raw,value=${{ steps.semantic.outputs.version }}
            type=raw,value=latest
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.title=Config Base DevContainer
            org.opencontainers.image.description=Optimized development container with pre-installed tools
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      - name: Build and push image with advanced caching
        if: steps.semantic.outputs.skip_release != 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .devcontainer/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: |
            type=gha,scope=buildkit-${{ github.ref_name }}
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/config-base:buildcache
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/config-base:latest
          cache-to: |
            type=gha,mode=max,scope=buildkit-${{ github.ref_name }}
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/config-base:buildcache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            VERSION=${{ steps.semantic.outputs.version }}
          secrets: |
            "github_token=${{ secrets.GITHUB_TOKEN }}"

      - name: Export tool versions
        if: steps.semantic.outputs.skip_release != 'true'
        working-directory: ${{ github.workspace }}
        run: |
          docker run --rm -v "$PWD":/workspace -w /workspace ghcr.io/${{ github.repository_owner }}/config-base:latest bash -lc '
            echo "## DevContainer Tool Versions" > devcontainer-info.txt
            echo "" >> devcontainer-info.txt
            echo "### Package Managers" >> devcontainer-info.txt
            brew --version >> devcontainer-info.txt 2>&1 || true
            npm --version >> devcontainer-info.txt 2>&1 || true
            echo "" >> devcontainer-info.txt
            echo "### Development Tools" >> devcontainer-info.txt
            terraform --version >> devcontainer-info.txt 2>&1 || true
            jq --version >> devcontainer-info.txt 2>&1 || true
            git --version >> devcontainer-info.txt 2>&1 || true
            docker --version >> devcontainer-info.txt 2>&1 || true
          '

      - name: Run container security scan
        if: steps.semantic.outputs.skip_release != 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/config-base:${{ steps.semantic.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        if: steps.semantic.outputs.skip_release != 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - uses: actions/upload-artifact@v4
        if: steps.semantic.outputs.skip_release != 'true'
        with:
          name: devcontainer-info
          path: |
            devcontainer-info.txt
            trivy-results.sarif
          retention-days: 30

      - name: Create Release
        if: steps.semantic.outputs.skip_release != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release