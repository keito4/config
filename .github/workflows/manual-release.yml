name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version type (major, minor, patch, or specific version like 1.2.3)'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: 'Custom version (optional, overrides version type)'
        required: false

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Install dependencies
        run: npm ci

      - name: Determine version
        id: version
        run: |
          if [ -n "${{ inputs.custom_version }}" ]; then
            echo "version=${{ inputs.custom_version }}" >> $GITHUB_OUTPUT
          else
            echo "Running semantic-release to determine version..."
            npx semantic-release --dry-run --no-ci > semantic-output.txt 2>&1 || true
            cat semantic-output.txt
            NEW_VERSION=$(grep -oP 'The next release version is \K[0-9]+\.[0-9]+\.[0-9]+' semantic-output.txt || echo "")
            if [ -z "$NEW_VERSION" ]; then
              # Fallback: use npm version to bump
              CURRENT_VERSION=$(git describe --tags --abbrev=0 | sed 's/v//')
              case "${{ inputs.version }}" in
                major)
                  NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1+1".0.0"}')
                  ;;
                minor)
                  NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2+1".0"}')
                  ;;
                patch)
                  NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."$3+1}')
                  ;;
              esac
            fi
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi
          echo "Version to release: $(cat $GITHUB_OUTPUT | grep version)"

      - name: Fix workspace permissions
        run: sudo chown -R $(id -u):$(id -g) "$GITHUB_WORKSPACE"

      - uses: docker/setup-qemu-action@v2

      - uses: docker/setup-buildx-action@v2
        with:
          driver-opts: image=moby/buildkit:latest

      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .devcontainer/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/config-base:${{ steps.version.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/config-base:latest
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/config-base:cache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository_owner }}/config-base:cache,mode=max

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Try semantic-release first
          npx semantic-release --no-ci || {
            # Fallback to manual release creation
            VERSION="${{ steps.version.outputs.version }}"
            TAG="v$VERSION"
            
            # Create tag if it doesn't exist
            if ! git rev-parse "$TAG" >/dev/null 2>&1; then
              git tag -a "$TAG" -m "Release $TAG"
              git push origin "$TAG"
            fi
            
            # Generate release notes
            PREV_TAG=$(git describe --tags --abbrev=0 "$TAG^" 2>/dev/null || echo "")
            if [ -n "$PREV_TAG" ]; then
              RELEASE_NOTES=$(git log --pretty=format:"- %s" "$PREV_TAG".."$TAG")
            else
              RELEASE_NOTES="Initial release"
            fi
            
            # Create GitHub release
            gh release create "$TAG" \
              --title "Release $TAG" \
              --notes "$RELEASE_NOTES" \
              --target main
          }
